<?php
# vim:ft=php

function loadBoris(Boris\Boris $boris, array $loaders)
{
    foreach ($loaders as $loader) {
        assertLoader($loader);

        if ($dir = $loader->getDir()) {
            $loader->initialize($boris, $dir);
            break;
        }
    }
}

function assertLoader($loader)
{
    if (!$loader instanceof Loader) {
        throw new \InvalidArgumentException(
            get_class($loader)." isn't a valid Boris loader"
        );
    }
}

abstract class Loader
{
    public $name = 'boris';

    public function getDir()
    {
        $dir = getcwd();

        while ($dir) {
            if ($this->assertDir($dir)) {
                return $dir;
            }

            $dir = substr($dir, 0, strrpos($dir, '/'));
        }

        return false;
    }

    protected function assertDir($dir)
    {
        return false;
    }

    public function initialize($boris, $dir)
    {
        $boris->setPrompt($this->name.'> ');
    }

}

class DrupalLoader extends Loader
{
    public $name = 'drupal';

    public function assertDir($dir)
    {
        return is_file("$dir/core/lib/Drupal.php");
    }

    public function initialize($boris, $dir)
    {
        parent::initialize($boris, $dir);

        chdir($dir);

        require_once "$dir/core/includes/bootstrap.inc";

        drupal_bootstrap(DRUPAL_BOOTSTRAP_CONFIGURATION);

        $kernel = new \Drupal\Core\DrupalKernel(
            'dev',
            drupal_classloader(),
            false
        );
        $kernel->boot();

        drupal_bootstrap(DRUPAL_BOOTSTRAP_CODE);

        $boris->onStart(function ($worker, $vars) use ($kernel) {
            $worker->setLocal('kernel', $kernel);
            $worker->setLocal('container', $kernel->getContainer());
        });
    }
}

class SymfonyLoader extends Loader
{
    public $name = 'symfony';

    public function assertDir($dir)
    {
        return is_file("$dir/app/bootstrap.php.cache")
            && is_file("$dir/app/AppKernel.php");
    }

    public function initialize($boris, $dir)
    {
        parent::initialize($boris, $dir);

        require "$dir/app/bootstrap.php.cache";
        require_once "$dir/app/AppKernel.php";

        $kernel = new AppKernel('dev', true);
        $kernel->loadClassCache();
        $kernel->boot();

        $boris->onStart(function ($worker, $vars) use ($kernel) {
            $worker->setLocal('kernel', $kernel);
            $worker->setLocal('container', $kernel->getContainer());
        });
    }

}
